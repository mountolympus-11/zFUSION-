IDSMAPSG TITLE 'DATASPACE SERVICES - SPACE MAP SEGMENT IDENTIFIER'      00010000
***************************************************************         00020000
*                                                                       00030000
*   READ / WRITE WORKING STORAGE AREA                                   00040000
*                                                                       00050000
***************************************************************         00060000
WORKAREA DSECT                                                          00070000
                                                                        00080000
         @WORK ,                  STANDARD WORKAREA                     00090000
                                                                        00100000
ALUFIRST DS    F                  ALU # OF STORAGE EXTENT ORIGIN        00110000
ALUCOUNT DS    F                  # ALU'S IN STORAGE EXTENT             00120000
RETMSEG  DS    A                  MAPSEG RETURN AREA PROVIDED BY CALLER 00130000
                                                                        00140000
SEGSTART DS    F                  OFFSET SPACE MAP SEGMENT START BYTE   00150000
STARTNDX DS    F                  FML ENTRY NDX OF STARTING ALU         00160000
SEGFINIS DS    F                  OFFSET SPACE MAP SEGMENT END BYTE     00170000
FINISNDX DS    F                  FML ENTRY NDX OF ENDING ALU           00180000
SEGLEN   DS    F                  # BYTES SPANNED BY MAP SEGMENT        00190000
                                                                        00200000
SEGSET   DS    XL3,X              FIRST, MIDDLE, LAST ALU ALLOC MASKS   00210000
SEGCHG   DS    XL3,X              FIRST, MIDDLE, LAST ALU CHANGE MASKS  00220000
                                                                        00230000
MAPMASK  DS    X                  SAMPLE MAP MASK BYTE IDENTIFYING ALL  00240000
*                                    ALU ENTRIES IN A MAP BYTE          00250000
                                                                        00260000
WORKLEN  EQU   *-WORKAREA         WORKAREA LENGTH                       00270000
                                                                        00280000
         EJECT                                                          00290000
         SPCBLOCK ,                                                     00300000
                                                                        00310000
         EJECT                                                          00320000
         SPCEQUS ,                                                      00330000
                                                                        00340000
         EJECT                                                          00350000
         OIE ,                                                          00360000
                                                                        00370000
         EJECT                                                          00380000
         MAPSEG ,                                                       00390000
                                                                        00400000
         EJECT                                                          00410000
         EQUS ,                                                         00420000
                                                                        00430000
         EJECT                                                          00440000
**<DOC-ON>*****************************************************         00450000
*                                                                       00460000
* ROUTINE: IDSMAPSG - SPACE MAP SEGMENT IDENTIFIER                      00470000
*                                                                       00480000
* DESCRIPTION:                                                          00490000
*                                                                       00500000
*    THIS ROUTINE IS USED TO GENERATE STORAGE MAP BIT MASKS             00510000
*    THAT CAN BE USED TO INSPECT AND/OR MODIFY THE STORAGE              00520000
*    OCCUPPIED BY A SPACE EXTENT EXPRESSED AS AN ALU ORIGIN AND         00530000
*    LENGTH PAIR.  EACH ALU IS REPRESENTED BY AN INTEGRAL               00540000
*    NUMBER OF ENTRIES PER STORAGE MAP BYTE; 2, 4, AND 8 BIT            00550000
*    ALU REPRESENTATIONS ARE SUPPORTED.  THE FIRST TWO BITS OF          00560000
*    AN ALU STORAGE MAP ENTRY ARE THE "IN USE" AND "CHANGED"            00570000
*    FLAGS, RESPECTIVELY.  THESE BITS ARE ACCESSED VIA SHIFT            00580000
*    INSTRUCTIONS ARE FIXED BY ARCHITECTURE.                            00590000
*                                                                       00600000
*    THE RESULT IS CONSTRUCTED IN A WORKAREA PROVIDED BY THE            00610000
*    CALLER AND MAPPED BY MAPSEG.  TWO STORAGE MAP BIT MASKS            00620000
*    ARE PRODUCED.  THE FIRST IS RETURNED IN MAPSEG.MSEGSET AND         00630000
*    IS USED TO MARK THE SPACE EXTENT PROVIDED AS INPUT AS "IN          00640000
*    USE".  THE SECOND IS RETURNED IN MAPSEG.MSEGCHG.  THE              00650000
*    CONSTRUCTION OF BOTH MASKS IS IDENTICAL, ONLY THE BIT              00660000
*    CONFIGURATIONS DIFFER.  THE REQUESTOR MAY USE THESE MASKS          00670000
*    TO TEST EXTENT USAGE, MARK AN EXTENT AS ALLOCATED, AND/OR          00680000
*    MARK AN EXTENT AS CHANGED.                                         00690000
*                                                                       00700000
*    UPON RETURN, MSEGOFF CONTAINS THE OFFSET OF THE FIRST              00710000
*    STORAGE MAP BYTE CONTAINING ALU ENTRIES FOR THE GIVEN              00720000
*    EXTENT.  MSEGLEN CONTAINS THE TOTAL NUMBER OF STORAGE MAP          00730000
*    BYTES SPANNED - A FUNCTION OF THE EXTENT LENGTH AND THE            00740000
*    NUMBER OF ALU ENTRIES PER STORAGE MAP BYTE.                        00750000
*                                                                       00760000
*    EACH BIT MASK CONSISTS OF THREE BYTES.  THE FIRST IS USED          00770000
*    TO REPRESENT ALU ENTRY POSITIONS WITHIN THE FIRST BYTE OF          00780000
*    THE SPACE MAP SEGMENT IDENTIFIED.  THE SECOND BYTE                 00790000
*    IDENTIFIES STORAGE MAP BIT POSITIONS FOR ANY STORAGE MAP           00800000
*    BYTE COMPLETELY SPANNED BY THE CANDIDATE SPACE EXTENT.             00810000
*    THE THIRD BYTE REPRESENTS ALU ENTRY POSITIONS LYING WITHIN         00820000
*    THE LAST BYTE OF THE SPACE MAP SEGMENT, IF NOT COMPLETELY          00830000
*    REPRESENTED BY THE FIRST AND SECOND BYTES.  A MASK BYTE            00840000
*    VALUE OF ZERO INDICATES THAT THE CORR FIRST/MIDDLE/LAST            00850000
*    PERSPECTIVE IS NOT RELEVANT.                                       00860000
*                                                                       00870000
* EXAMPLE:                                                              00880000
*                                                                       00890000
*    ASSUME THE SPACE IS CONFIGURED WITH A STORAGE MAP USING            00900000
*    FOUR BITS PER ALU.  THE CALLER POSES A CANDIDATE SPACE             00910000
*    EXTENT HAVING A STARTING ALU# = 7 AND SPANNING 6 ALUS.             00920000
*    THE MAPSEG RETURNED IS FORMATTED AS FOLLOWS:                       00930000
*                                                                       00940000
*       MSEGOFF:  3                           - STORAGE MAP OFFSET      00950000
*       MSEGLEN:  5                           - FIRST, LAST, 3 MIDS     00960000
*       MSEGSET:  00001000 10001000 10000000  - IN USE BIT POSITIONS    00970000
*       MSEGCHG:  00000100 01000100 01000000  - CHANGE BIT POSITIONS    00980000
*                                                                       00990000
*                                                                       01000000
* ON ENTRY:                                                             01010000
*                                                                       01020000
*    R1 POINTS TO AN OS/VS PARAMETER LIST CONTAINING                    01030000
*                                                                       01040000
*        +00 - ALU # BEGINNING EXTENT                                   01050000
*        +04 - # ALU'S CONTAINED IN EXTENT                              01060000
*        +08 - PRIMARY ADDR OF MAP SEGMENT (MAPSEG) RETURN AREA         01070000
*                                                                       01080000
*    A/R10 - ADDRESS OF THE SPACE BLOCK (SPCBLOCK)                      01090000
*                                                                       01100000
*                                                                       01110000
* ON EXIT:                                                              01120000
*                                                                       01130000
*    R15 CONTAINS ONE OF THE FOLLOWING RETURN CODES                     01140000
*                                                                       01150000
*        RC00 - MAP SEGMENT IDENTIFIED AND DESCRIBED IN MAPSEG          01160000
*        RC08 - INVALID STORAGE EXTENT PROVIDED AS INPUT                01170000
*                                                                       01180000
**<DOC-OFF>****************************************************         01190000
                                                                        01200000
         EJECT                                                          01210000
IDSMAPSG @ENTER WORKA=(WORKAREA,WORKLEN)                                01220000
                                                                        01230000
         USING SPCBLOCK,R10       CONVENTION                            01240000
                                                                        01250000
         LM    R3,R5,0(R1)        FETCH PASSED PARAMETERS               01260000
         ST    R3,ALUFIRST        EXTENT ORIGIN AS ALU #                01270000
         ST    R4,ALUCOUNT        EXTENT LENGTH AS # ALU'S              01280000
         ST    R5,RETMSEG         RETURN AREA ADDRESS                   01290000
                                                                        01300000
*--------------------------------------------------------------         01310000
*   IDENTIFY SPACE MAP SEGMENT STARTING AND ENDING BYTE ADDRS           01320000
*--------------------------------------------------------------         01330000
         SR    R6,R6              PREPARE FOR DIVIDE                    01340000
         L     R7,ALUFIRST        ALU # OF EXTENT ORIGIN                01350000
         D     R6,=A(#MAP_ALUS_BYTE) GENERATE BYTE/ENTRY OFFSETS        01360000
         ST    R6,STARTNDX        ENTRY # WITHIN BYTE (0-N)             01370000
         ST    R7,SEGSTART        SAVE SEGMENT ORIGIN BYTE OFFSET       01380000
                                                                        01390000
         SR    R6,R6              PREPARE FOR DIVIDE                    01400000
         L     R7,ALUFIRST        ALU # OF EXTENT ORIGIN                01410000
         A     R7,ALUCOUNT        IDENTIFY LAST ALU                     01420000
         BCTR  R7,0               ... OF STORAGE EXTENT                 01430000
         D     R6,=A(#MAP_ALUS_BYTE) GENERATE BYTE/ENTRY OFFSETS        01440000
         ST    R6,FINISNDX        ENTRY # WITHIN BYTE (0-N)             01450000
         ST    R7,SEGFINIS        SAVE SEGMENT END BYTE OFFSET          01460000
                                                                        01470000
         S     R7,SEGSTART        DIFFERENCE BETWEEN START AND END      01480000
         LA    R7,1(,R7)          PROPERLY ADJUSTED                     01490000
         ST    R7,SEGLEN          NUMBER OF BYTES SPANNED BY SEGMENT    01500000
                                                                        01510000
*--------------------------------------------------------------         01520000
*   "FIRST" MASK GENERATED IF PARTIAL UPDATE TO FIRST SEG BYTE          01530000
*--------------------------------------------------------------         01540000
         MVI   MAPMASK,MAPALLOC_ALL  EXPOSE ALL ALU-ALLOCTED MASK BITS  01550000
                                                                        01560000
         ICM   R15,15,STARTNDX    SEGMENT BEGINS ON BYTE BOUNDARY?      01570000
         BNZ   SFIRST             NO, FIRST BYTE IS SPECIAL             01580000
         CLC   ALUCOUNT,=A(#MAP_ALUS_BYTE)  ENTIRE BYTE CONSUMED?       01590000
         BNL   TLAST              SKIP IF SO                            01600000
                                                                        01610000
SFIRST   DS    0H                                                       01620000
         MH    R15,=AL2(#MAP_BITS_ALU)  PRODUCT IS THE NUMBER OF...     01630000
         SR    R0,R0              PREPARE FOR INSERT                    01640000
         IC    R0,MAPMASK         LEADING BITS TO DISCARD               01650000
         SRL   R0,0(R15)          ZERO OUT THE HIGHORDER ENTRIES        01660000
         STC   R0,SEGSET+0        SAVE ALLOCATE MASK                    01670000
                                                                        01680000
*--------------------------------------------------------------         01690000
*   "LAST" MASK GENERATED IF PARTIAL UPDATE TO LAST BYTE                01700000
*--------------------------------------------------------------         01710000
TLAST    DS    0H                                                       01720000
         LA    R15,#MAP_ALUS_BYTE-1  # ENTRIES IN A FULL BYTE -1        01730000
         S     R15,FINISNDX       NDX OF LAST ENTRY SPANNED             01740000
         BZ    TMIDDLE            LAST BYTE IS NOT A SPECIAL CASE       01750000
                                                                        01760000
         @LAE  R9,SEGSET+0        ASSUME FIRST BYTE IS LAST BYTE        01770000
         CLC   SEGSTART,SEGFINIS  FIRST AND LAST COINCIDE?              01780000
         BE    SLAST              SECOND UPDATE OF FIRST IF SO          01790000
         LA    R9,SEGSET+2        LAST BYTE IS DISTINCT FROM FIRST      01800000
         MVC   0(1,R9),MAPMASK    INITIAL VALUE FOR LAST MASK           01810000
                                                                        01820000
SLAST    DS    0H                 R15 <== # OF ENTRIES TO DISCARD       01830000
         MH    R15,=AL2(#MAP_BITS_ALU)  CONVERT TO BIT COUNT            01840000
         IC    R0,0(,R9)          FETCH MASK BYTE                       01850000
         SRL   R0,0(R15)          DISCARD TRAILING ENTRIES              01860000
         SLL   R0,0(R15)          REALIGN MASK                          01870000
         STC   R0,0(,R9)          SAVE UPDATED VALUE                    01880000
                                                                        01890000
*--------------------------------------------------------------         01900000
*   "MIDDLE" MASK GENERATED IF # BYTES > # PARTIAL UPDATES              01910000
*--------------------------------------------------------------         01920000
TMIDDLE  DS    0H                                                       01930000
         SR    R15,R15            PARTIAL UPDATE COUNT                  01940000
         ICM   R0,1,SEGSET+0      FIRST MAP BYTE A PARTIAL UPDATE       01950000
         BZ    *+8                SKIP IF NOT                           01960000
         LA    R15,1(,R15)        KICK                                  01970000
         ICM   R0,1,SEGSET+2      LAST MAP BYTE A PARTIAL UPDATE        01980000
         BZ    *+8                SKIP IF NOT                           01990000
         LA    R15,1(,R15)        KICK                                  02000000
                                                                        02010000
         C     R15,SEGLEN         PARTIALS BYTES < TOTAL BYTES?         02020000
         BNL   *+10               SKIP IF NOT                           02030000
         MVC   SEGSET+1(1),MAPMASK ELSE RETURN MIDDLE MASK              02040000
                                                                        02050000
*--------------------------------------------------------------         02060000
*   FORMAT SPACE MAP SEGMENT DESCRIPTOR                                 02070000
*--------------------------------------------------------------         02080000
         L     R2,RETMSEG         DESCRIPTOR IN CALLERS STORAGE         02090000
         @LAE  R2,0(R2,0)         AND MUST RESIDE IN PRIMARY SPACE      02100000
         USING MAPSEG,R2          MAP SEGMENT DESCRIPTOR FORMAT         02110000
                                                                        02120000
         XC    MAPSEG(MAPSEGLN),MAPSEG                                  02130000
         MVC   MSEGOFF,SEGSTART   SEGMENT ORIGIN OFFSET                 02140000
         MVC   MSEGLEN,SEGLEN     SEGMENT LENGTH (BYTES)                02150000
         L     R0,SEGSET          ALLOCATED ALU MASKS                   02160000
         ST    R0,MSEGSET         RETURN TO REQUESTOR                   02170000
         SRL   R0,1               CONVERT TO CHANGED ALU MASKS          02180000
         ST    R0,MSEGCHG         RETURN TO REQUESTOR                   02190000
         DROP  R2                 MAPSEG                                02200000
                                                                        02210000
*--------------------------------------------------------------         02220000
*   RETURN COMPLETION STATUS AND MAPSEG DESCRIPTOR TO CALLER            02230000
*--------------------------------------------------------------         02240000
RET      DS    0H                                                       02250000
         LA    R15,RC00           INDICATE SUCCESS                      02260000
         @EXIT ,                                                        02270000
                                                                        02280000
         EJECT                                                          02290000
***************************************************************         02300000
*                                                                       02310000
*   READ ONLY CONSTANTS, ETC.                                           02320000
*                                                                       02330000
***************************************************************         02340000
         LTORG ,                                                        02350000
         END   ,                                                        02360000
